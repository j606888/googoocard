// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String
  password    String
  classrooms  Classroom[]  @relation("OwnedClassrooms")
  memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Classroom {
  id          Int          @id @default(autoincrement())
  ownerId     Int
  owner       User         @relation("OwnedClassrooms", fields: [ownerId], references: [id])
  name        String
  memberships Membership[]
  cards       Card[]
  students    Student[]
  lessons     Lesson[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teachers    Teacher[]
}

model Membership {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  role        String    @default("owner")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, classroomId])
}

model Teacher {
  id          Int             @id @default(autoincrement())
  name        String
  classroomId Int
  classroom   Classroom       @relation(fields: [classroomId], references: [id])
  lessons     LessonTeacher[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Card {
  id           Int           @id @default(autoincrement())
  name         String
  price        Int
  sessions     Int
  expiredAt    DateTime?
  classroomId  Int
  studentCards StudentCard[]
  lessons      LessonCard[]
  classroom    Classroom     @relation(fields: [classroomId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Student {
  id           Int           @id @default(autoincrement())
  name         String
  avatarUrl    String
  classroomId  Int
  classroom    Classroom     @relation(fields: [classroomId], references: [id])
  studentCards StudentCard[]
  lessons      LessonStudent[]
  attendanceRecords AttendanceRecord[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model StudentCard {
  id                Int      @id @default(autoincrement())
  studentId         Int
  student           Student  @relation(fields: [studentId], references: [id])
  cardId            Int
  card              Card     @relation(fields: [cardId], references: [id])
  basePrice         Int
  finalPrice        Int
  totalSessions     Int
  remainingSessions Int
  paid              Boolean  @default(true)
  attendanceRecords AttendanceRecord[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiredAt         DateTime?
}

model Lesson {
  id          Int             @id @default(autoincrement())
  name        String
  classroomId Int
  classroom   Classroom       @relation(fields: [classroomId], references: [id])
  teachers    LessonTeacher[]
  cards       LessonCard[]
  periods     LessonPeriod[]
  students    LessonStudent[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model LessonTeacher {
  id        Int      @id @default(autoincrement())
  lessonId  Int
  teacherId Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lessonId, teacherId])
}

model LessonCard {
  id        Int      @id @default(autoincrement())
  lessonId  Int
  cardId    Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  card      Card     @relation(fields: [cardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lessonId, cardId])
}

model LessonPeriod {
  id        Int      @id @default(autoincrement())
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  attendanceRecords AttendanceRecord[]
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attendanceTakenAt DateTime?
}

model LessonStudent {
  id        Int      @id @default(autoincrement())
  lessonId  Int
  studentId Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lessonId, studentId])
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  lessonPeriodId Int
  lessonPeriod LessonPeriod @relation(fields: [lessonPeriodId], references: [id])
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentCardId Int
  studentCard StudentCard @relation(fields: [studentCardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
