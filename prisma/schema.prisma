// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  classrooms Classroom[]  @relation("OwnedClassrooms")
  memberships Membership[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id        Int      @id @default(autoincrement())
  ownerId   Int
  owner     User     @relation("OwnedClassrooms", fields: [ownerId], references: [id])
  name      String
  memberships Membership[]
  cards Card[]
  students Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teachers Teacher[]
}

model Membership {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  classroomId Int
  classroom Classroom @relation(fields: [classroomId], references: [id])
  role      String   @default("owner")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, classroomId])
}

model Teacher {
  id        Int      @id @default(autoincrement())
  name      String
  classroomId Int
  classroom Classroom @relation(fields: [classroomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  sessions  Int
  expiredAt DateTime?
  classroomId Int
  studentCards StudentCard[]
  classroom Classroom @relation(fields: [classroomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String
  avatarUrl String
  classroomId Int
  classroom Classroom @relation(fields: [classroomId], references: [id])
  studentCards StudentCard[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentCard {
  id        Int      @id @default(autoincrement())
  studentId Int
  student Student @relation(fields: [studentId], references: [id])
  cardId Int
  card Card @relation(fields: [cardId], references: [id])
  basePrice Int
  finalPrice Int
  totalSessions Int
  remainingSessions Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
